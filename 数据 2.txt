"@ -0,0 +1,515 @@"
# ##########################################################################
# The specifications are taken from
#
# http://patterns.projects.cis.ksu.edu/documentation/specifications/ALL.raw.
#
# Typed in in their present form by Andreas Bauer (2009-04-30)
#
# Lines starting with '-' are those that can be parsed by ltl3tools.
"# Lines starting with '@' are not processed, as they take about 20 min"
# to process on my dual core machine. 
#
"# Formulas marked as ??? are not processed at all due to other problems, not"
# specified above.
#
# ##########################################################################












































































































































































































PATTERN: Absence
LTL:  <>register_a1_e1 -> (!notify_event_a1_e1 U register_a1_e1)
- <>r -> ((! n) U r)

PATTERN: Absence
LTL: [](unregister_a1_e1 -> 
        (!notify_client_event_a1_e1 U 
         (register_a1_e1 || []!notify_client_event_a1_e1)))
- [](u -> ((! n) U (r || [](! n))))

PATTERN: Constrained Response-Chain (3-1)
LTL: <>term -> 
     []((register_a1_e1 && 
         (!unregister_a1_e1 U 
          (register_a2_e1 && 
           (!unregister_a1_e1 && !unregister_a2_e1) U notify_artists_e1))) ->
        <>(notify_artist_e1 &
           (!notify_client_event_a2_e1 U notify_client_event_a1_e1)))
@ <>t -> []((ra1e1 && ((! ua1e1) U (ra2e1 && ((! ua1e1) && (! ua2e1)) U ne1))) -> <>(ne1 && ((! na2e1) U na1e1)))

PATTERN: Absence
LTL: [](e1_szEQ2 & (after_register_a1_e1 | after_register_a2_e1) -> 
        (!(register_a2_e1 || register_a1_e1)) U
         (e1_szLT2 || []!(register_a2_e1 || register_a1_e1)))
- [](eq2 && (ara1e1 || ara2e1) -> ((! (ra2a1 || ra1e1))) U (lt2 || [](! (ra2e1 || ra1e1))))

PATTERN: Absence
LTL: <>register_a1_e1 -> (!unregister_a1_e1 U register_a1_e1)
- <>ra1e1 -> ((! ua1e1) U ra1e1)

PATTERN: Absence
LTL: [](after_unregister_a1_e1 -> 
        (!unregister_a1_e1 U (register_a1_e1 || []!unregister_a1_e1)))
- [](aa1e1 -> ((! ua1e1) U (ra1e1 || [](! (ua1e1)))))

PATTERN: Universal
LTL: []( term -> (e1_szEQ0 && e2_szEQ0))
- [](t -> (e1 && e2))

PATTERN: Response
LTL: (register_a1_e1 -> (!term U unregister_a1_e1)) U (term | [](!term))
- (ra1e1 -> ((! t) U ua1e1)) U (t || []((! t)))

PATTERN: Response
LTL: AG(landingButi.pressed -> AF(lift.floor=i & lift.door=open))
- [](land -> <>(liftf && lifto))

PATTERN: Response
LTL: AG(landingButi.pressed -> AF(lift.floor=i & lift.door=open & 
                                   lift.direction=down))
- [](la -> <>(lif && lio && lid))

PATTERN: Response
LTL: AG(liftButi.pressed -> AF(floor=i & door=open))
- [](l -> <>(f && d))

PATTERN: Unknown
LTL: AG(floor=3 & idle & door=closed -> EG(floor=3 & door=closed))
???

PATTERN: Response (constrained variation)
LTL: AG(floor=2 & direction=up & liftBut5.pressed ->
        A[direction=up U floor=5])
???

PATTERN: Response
LTL: AG(liftBut3.pressed & !lift.empty -> AF((floor=3 & dor=open) | lift.empty))
- [](l3 && (! le) -> <>((f3 && d) || le))

PATTERN: Unknown
LTL: AG(floor=4 & idle -> E[idle U floor=1])
???

PATTERN: Response (constrained variation)
LTL: AG(up & liftBut2.pressed & !liftBut3.pressed ->
        A[!(floor=3 & doors=open) U ((floor=2 & door=open) | !up)])
???

PATTERN: Response (constrained variation)
LTL: AG(floor=3 & overloaded ->
        A[floor=3 U !overloaded])
???

PATTERN: Unknown
LTL: AG(door=open & !overloaded -> E[!overloaded U door=closed])
???

PATTERN: Absence
LTL: AG(!(overloaded & door=closed))
- []((! (o) && d))

PATTERN: Constrained Response
LTL: [] (p -> q U r)
- [] (p -> q U r)

PATTERN: Absence
LTL: [] !(cr1 && cr2)
- [] (! (cr1 && cr2))

PATTERN: Response
LTL: [] (up -> (<> down))
- [] (up -> (<> down))

PATTERN: Response
LTL: [] (p -> <>q)
- [] (p -> <>q)

PATTERN: Unknown
LTL: [] (b -> ([] !np_ && <>r))
- [] (b -> ([] (! np) && <>r))

PATTERN: Existence
LTL:  <> bp
- <> bp

PATTERN: Unknown
LTL: []<> (a -> (c U d))
- []<> (a -> (c U d))

PATTERN: Unknown
LTL: []<> (a -> <> d))
- []<> (a -> <> d))

PATTERN: Response
LTL: [] ((p1 -> <>p2) && (p3 -> <>p4)) -> [](p5 -> <>p6)
- [] ((p1 -> <>p2) && (p3 -> <>p4)) -> [](p5 -> <>p6)

PATTERN: Unknown
LTL: (p && X q) || (q && X p)
- (p && X q) || (q && X p)

PATTERN: Unknown
LTL: <> ((a && b) && b U c)
- <> ((a && b) && b U c)

PATTERN: Existence
LTL: <> (p U q)
- <> (p U q)

PATTERN: Existence
LTL: <>[] p
- <>[] p

PATTERN: Always
LTL: [] (p U !p)
- [] (p U (! p))

PATTERN: Universal
LTL: []<>f
- [] <> f

PATTERN: Universal
LTL: [](f -> []f)
- [](f -> []f)

PATTERN: Universal
LTL: []<>aftsCC  
- [] <> a

PATTERN: Existence
LTL: <>aftsCC  
- <> a

PATTERN: Absence
LTL: [](aftsCC -> !<>aftsDR)
- [](a -> (! <> d))

PATTERN: Response
LTL: [](aftsCR -> <>aftsCC)
- [](a -> <>c)

PATTERN: Existence
LTL: aftsCR -> <>(aftsCC || aftsDR)
- a -> <>(c || d)

PATTERN: Filter=GlobalUniversal+GlobalAbsence
LTL: ([]<>aftsDR) -> !<>aftsCC 
- ([]<>d) -> (! (<> c))

PATTERN: Response
LTL: [](p -> <>[]q)
- [](p -> <>[] q)

PATTERN: Response
LTL: [](P(0) -> <>Q(0)) && ... && [](P(m) -> <>Q(m))
???

PATTERN: Universal
LTL: [](pressing -> (!arm1_in_press && !arm2_in_press))
- [](p -> ((! a1) && (! a2)))

PATTERN: Universal
LTL: []((P(0) -> Q(0)) && ... && (P(m) -> Q(m)))
???

PATTERN: Response
LTL: []((State=INIT && request) -> <>(State=WORK))
- []((si && r) -> <>(sw))

PATTERN: Response
LTL: [](State=WORK -> <>(State=INIT))
- [](sw -> <>si)

PATTERN: Response Chain 1-2
LTL: []((State=INIT && request) -> 
        <>(!State=INIT && (!State=INIT -> <>(State=INIT))))
- []((si && r) -> <>((! si) && ((! si) -> <>(si))))

PATTERN: Universal
LTL: [](EndOfCommunication -> BufferEmpty)
- [](eoc -> be)

PATTERN: Absence
LTL: [](Synch(to_medium) -> 
        !Synch(to_medium) U (Broadcast | []!Synch(to_medium)))
- [](s -> (! s) U (b || [](! s)))

PATTERN: Absence
LTL: []!data==id
- [](! d)

PATTERN: Universal
LTL: [](safe -> one_top)
- [](s -> o)

PATTERN: Universal
LTL: [](safe -> bounded_height)
- [](s -> b)

PATTERN: Universal
LTL: [](safe -> unique_ids)
- [](s -> u)

PATTERN: Response
LTL: [](merging -> <>safe)
- [](m -> <>s)

PATTERN: Absence
LTL: [](merging -> !(new_id U safe))
- [](m -> (! (n) U s))

PATTERN: Universal
LTL: [](SignalFreeWay && !LevelCrossingClosed)
- [](s && (! l))

PATTERN: Absence
LTL: []((PDcontrolX && <>EndCycle) -> !PDcontrolContraX U EndCycle)
- []((p && <>e) -> (! px) U e)

PATTERN: Response 
LTL: []((SignalFreeWay && LevelCrossingClosed) -> 
        <>(complete_RESTORE-AUTOMATICMODE && LevelCrossingClosed))
- []((s && l) -> <>(c && l))

PATTERN: Universal
"LTL: [](return_Achieving_Task -> not_subscriber(this,p.memory_property))"
- [](r -> n)

PATTERN: Response
LTL: [](task1_property_broken -> <>task1_terminated)
- [](t -> <>tt)

PATTERN: Response
LTL: [](task1_property_broken -> 
        <>(task1_terminated || task1_property_repaired))
- [](t -> <>(tt || tpr))

PATTERN: Response
LTL: [](RequestedRegisterImpl[i] -> <>ServerRegistered[i])
- [](r -> <> s)

PATTERN: Existence
LTL:  [](RequestGetIOR[i]=j -> (ServerRegistered[j] U GetIOR(i)))
- [](r -> (s U g))

PATTERN: Response
LTL: [](ClientSend[i] -> <>ClientRecv[i])
- [](s -> <>r)

PATTERN: Response
LTL: [](ClientSend[i] -> <>ServerRecv[i])
- [](s -> <>r)

PATTERN: Response
LTL: [](ClientAskResult[i] -> <>ClientGetResult[i])
- [](a -> <> g)

PATTERN: Unknown
LTL: [](TestImplKey[j]=ReceivedKey W !ServerRegistered[j]) 
- [] ( (t U (! s)) || [] t)

PATTERN: Universal
LTL: [](ReceivedInteger = (SentInteger + 1))
- [] r